# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

require 'pry'

def remove_non_primes(numbers_array)
    x = 2
    loop do 
        numbers_array.delete_if do |n|
            n >= (x * x) && n % x == 0
        end
        break if (x * x) > numbers_array[-1]
        x += 1
    end
    
    return numbers_array

end

def find_all_factors(numbers_array, triangle_number)
    
    numbers_array.uniq.each_index do |i|
        n = 1
        until n + i + 1 == numbers_array.uniq.length
            binding.pry
            numbers_array << numbers_array.uniq[i] * numbers_array.uniq[i + n] unless numbers_array.uniq[i] * numbers_array.uniq[i + n] > triangle_number
            n += 1
        end

    end

    return numbers_array.uniq.length

end

more_factors_than = 5

n = 2

loop do 
    triangle_number = (n * (n + 1)) / 2
    numbers_array = [*1..triangle_number]
    if find_all_factors(remove_non_primes(numbers_array), triangle_number) > more_factors_than
        puts triangle_number
    else
    n += 1
    end
end


